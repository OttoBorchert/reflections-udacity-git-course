> What happens when you initialize a repository? Why do you need to do it?
Git creates a .git directory in the current working directory. It is created 
so that git knows that the current directory is a git repository. 

> How is the staging area different from the working directory and the repository? 
> What value do you think it offers?
The staging area is a space to put files that you want to put on the repository. It 
can contain files that are not in the repository, but the files must be in the current 
working directory. 
The staging area will allow us to add multiple files at a single time. In the first lesson, 
one of the advantages of git was the ability to link several files together in a single commit,
this would help with this ability.

> How can you use the staging area to make sure you have one commit per logical change?
Only add files that are related to the logical change!

> What are some situations when branches would be helpful in keeping your history organized? 
> How would branches help?
The situations offered in the video included when you want to try a brand new version of the code, 
or if you wanted to create a new language version. I could see it working if you wanted to refactor 
a large percentage of the code, while leaving the main branch intact. For example, when working on 
a new version of a piece of software, you could use branches to keep track of each version. 

Branches would help by keeping the main branch and the different versions separate, so you could 
continue to provide bug fixes to older versions, while still trying experimental or new features 
in the branches.

> How do the diagrams help you visualize the branch structure?
You can see the parents of all commits. You can also see any commits that are not related 
to a branch. The information in these commits would be lost if you didn't create a branch. 

> What is the result of merging two branches together? 
> Why do we represent it in the diagram the way we do?
The result is a combined code base with all changes in one branch. It is represented in 
the diagram that way because both branches had parent commits. By creating a new commit 
with two parents, this maintains the structure of the commits in both branches, if needed 
later.


